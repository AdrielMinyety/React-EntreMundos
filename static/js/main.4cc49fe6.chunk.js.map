{"version":3,"sources":["img/luna.png","img/marte.png","img/saturno.png","img/jupiter.png","img/agujeronegro.png","components/Formulario.js","components/resultado.js","components/Spinner.js","App.js","helpers.js","serviceWorker.js","index.js"],"names":["module","exports","Formulario","state","libras","planeta","unidadDePeso","actualizarState","e","target","name","value","setState","habilitarSubmit","mandarDatos","preventDefault","props","datosPeso","className","onSubmit","this","onChange","placeholder","type","disabled","Component","Resultado","image","luna","marte","saturno","jupiter","agujero","console","log","src","alt","style","maxWidth","pesoTotal","Spinner","App","cargando","datos","peso","unidad","peso_final","datoFinal","toFixed","calcularPeso","setTimeout","componente","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,2MCqF5BC,E,2MAlFXC,MAAQ,CACJC,OAAQ,GACRC,QAAS,GACTC,aAAc,M,EAGlBC,gBAAkB,SAACC,GAAM,MAMCA,EAAEC,OAAjBC,EANc,EAMdA,KAAMC,EANQ,EAMRA,MAGb,EAAKC,SAAL,eACKF,EAAQC,K,EAIjBE,gBAAkB,WAAM,MAGQ,EAAKV,MAAzBC,EAHY,EAGZA,OAAQC,EAHI,EAGJA,QAIhB,OAHgBD,IAAWC,G,EAM/BS,YAAc,SAACN,GACXA,EAAEO,iBADe,MAIyB,EAAKZ,MAAvCC,EAJS,EAITA,OAAQC,EAJC,EAIDA,QAASC,EAJR,EAIQA,aAGzB,EAAKU,MAAMC,UAAUb,EAAQC,EAASC,I,wEAKtC,OACI,0BAAMY,UAAU,eAAeC,SAAWC,KAAKN,aAC3C,yBAAKI,UAAU,YACX,yBAAKA,UAAU,oBACX,2BACIG,SAAWD,KAAKb,gBAChBG,KAAK,SACLY,YAAY,UACZC,KAAK,SACLL,UAAU,mCAGlB,yBAAKA,UAAU,oBACX,4BAAQR,KAAK,eAAeW,SAAWD,KAAKb,gBAAkBW,UAAU,iCACpE,4BAAQP,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,iBAIZ,yBAAKO,UAAU,cACX,4BAAQR,KAAK,UAAUW,SAAWD,KAAKb,gBAAkBW,UAAU,iCAC/D,4BAAQP,MAAM,IAAd,8BACA,4BAAQA,MAAM,QAAd,cACA,4BAAQA,MAAM,SAAd,YACA,4BAAQA,MAAM,WAAd,cACA,4BAAQA,MAAM,WAAd,iBACA,4BAAQA,MAAM,WAAd,iCAGR,2BACIa,SAAWJ,KAAKP,kBAChBU,KAAK,SACLL,UAAU,kCACVP,MAAM,mB,GA5EDc,a,wFC6CVC,EArCG,SAACV,GACf,IAAIW,EAGJ,OAAQX,EAAMX,SAGV,IAAK,OACDsB,EAAQC,IACR,MACJ,IAAK,QACDD,EAAQE,IACR,MACJ,IAAK,UACDF,EAAQG,IACR,MACJ,IAAK,UACDH,EAAQI,IACR,MACJ,IAAK,UACDJ,EAAQK,IACR,MACJ,QACIC,QAAQC,IAAI,uCAIpB,OACI,yBAAKhB,UAAU,uCACb,yBAAKA,UAAU,uBAAuBiB,IAAK,KAAOR,EAAOS,IAAI,sBAAsBC,MAAO,CAACC,SAAU,UACrG,yBAAKpB,UAAU,mCACb,uBAAGA,UAAU,uBAAb,sBAAmD,0BAAMA,UAAU,iCAAkCF,EAAMuB,WAA3G,IAA8H,0BAAMrB,UAAU,oBAAoBF,EAAMV,aAA1C,OAA9H,QC9BGkC,EATC,WACZ,OACI,yBAAKtB,UAAU,WACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,YCsEZuB,E,2MAjEbtC,MAAQ,CACNoC,UAAY,GACZlC,QAAS,GACTC,aAAc,GACdoC,UAAU,G,EAIZzB,UAAY,SAACb,EAAQC,EAASC,GAG5B,IAAIqC,ECtBD,SAAsBC,EAAMvC,EAASwC,GAGxC,IAMIC,EAAa,KAEbC,EAAY,CACZD,aACAzC,UACAwC,UAIJ,OAAQxC,GACJ,IAAK,OAQD,OAPAyC,EAhBY,KAgBCF,EAjBC,IAkBdX,QAAQC,IAAR,qBAA0B7B,EAA1B,eAAwCyC,EAAWE,QAAQ,GAA3D,YAAiEH,IAEjEE,EAAUD,WAAaA,EAAWE,QAAQ,GAC1CD,EAAU1C,QAAUA,EACpB0C,EAAUF,OAASA,EAEZE,EACX,IAAK,QAQD,OAPAD,EAxBa,IAwBAF,EA1BC,IA2BdX,QAAQC,IAAR,qBAA0B7B,EAA1B,eAAwCyC,EAAWE,QAAQ,GAA3D,YAAiEH,IAEjEE,EAAUD,WAAaA,EAAWE,QAAQ,GAC1CD,EAAU1C,QAAUA,EACpB0C,EAAUF,OAASA,EAEZE,EACX,IAAK,UAQD,OAPAD,EAhCe,KAgCFF,EAnCC,IAoCdX,QAAQC,IAAR,qBAA0B7B,EAA1B,eAAwCyC,EAAWE,QAAQ,GAA3D,YAAiEH,IAEjEE,EAAUD,WAAaA,EAAWE,QAAQ,GAC1CD,EAAU1C,QAAUA,EACpB0C,EAAUF,OAASA,EAEZE,EACX,IAAK,UAQD,OAPAD,EAxCe,KAwCFF,EA5CC,IA6CdX,QAAQC,IAAR,qBAA0B7B,EAA1B,eAAwCyC,EAAWE,QAAQ,GAA3D,YAAiEH,IAEjEE,EAAUD,WAAaA,EAAWE,QAAQ,GAC1CD,EAAU1C,QAAUA,EACpB0C,EAAUF,OAASA,EAEZE,EACX,IAAK,UAQG,OAPAD,EAhDW,KAgDEF,EArDH,IAsDVX,QAAQC,IAAR,qBAA0B7B,EAA1B,eAAwCyC,EAAWE,QAAQ,GAA3D,YAAiEH,IAEjEE,EAAUD,WAAaA,EAAWE,QAAQ,GAC1CD,EAAU1C,QAAUA,EACpB0C,EAAUF,OAASA,EAEZE,EAEX,QACAd,QAAQC,IAAI,wCD5CRe,CAAa7C,EAAQC,EAASC,GAG1C,EAAKM,SAAS,CACZ8B,UAAU,IACT,WACDQ,YAAW,WACT,EAAKtC,SAAS,CACZ2B,UAAWI,EAAMG,WACjBzC,QAASsC,EAAMtC,QACfC,aAAcqC,EAAME,OACpBH,UAAU,MAEX,S,wEAIG,IAEJS,EAFG,EACgD/B,KAAKjB,MAApDoC,EADD,EACCA,UAAWlC,EADZ,EACYA,QAASC,EADrB,EACqBA,aAAcoC,EADnC,EACmCA,SAsB1C,MAjBiB,KAAdH,GAAqBG,EAEbA,GAGTT,QAAQC,IAAI,eACZiB,EAAa,kBAAC,EAAD,OAIbA,EAAa,kBAAC,EAAD,CACCZ,UAAWA,EACXlC,QAASA,EACTC,aAAcA,IAZ5B6C,EAAa,uDAiBb,yBAAKjC,UAAU,iBACb,wBAAIA,UAAU,+BAAd,8BACA,kBAAC,EAAD,CACED,UAAWG,KAAKH,YAElB,yBAAKC,UAAU,4CACZiC,Q,GA3DO1B,aEEE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4cc49fe6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/luna.ab0189e1.png\";","module.exports = __webpack_public_path__ + \"static/media/marte.5427a5dd.png\";","module.exports = __webpack_public_path__ + \"static/media/saturno.c095a7aa.png\";","module.exports = __webpack_public_path__ + \"static/media/jupiter.6b7c6610.png\";","module.exports = __webpack_public_path__ + \"static/media/agujeronegro.55141710.png\";","import React, { Component } from 'react';\r\n\r\nclass Formulario extends Component {\r\n    state = { \r\n        libras: \"\",\r\n        planeta: \"\",\r\n        unidadDePeso: \"lb\"\r\n    }\r\n\r\n    actualizarState = (e) => {\r\n        // leer los datos del input.\r\n        // read the data from the input.\r\n          // console.log(e.target.value);\r\n        // haciendo un destructuring.\r\n        // making a destructuring.\r\n        const {name, value} = e.target;\r\n        // guardar en el State.\r\n        // save in the State.\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    habilitarSubmit = () => {\r\n        // Destructuring al state\r\n        // Destructuring the State\r\n        const { libras, planeta } = this.state;\r\n        let noValido = !libras || !planeta;\r\n        // validar si está vacío.\r\n        // validate if is empty.\r\n        return noValido;\r\n    }\r\n\r\n    mandarDatos = (e) => {\r\n        e.preventDefault();\r\n        // destructuring al state\r\n        // destructuring the state\r\n        const { libras, planeta, unidadDePeso } = this.state;\r\n        // pasarlo mediante props al componente padre\r\n        // send it through props to the parent component\r\n        this.props.datosPeso(libras, planeta, unidadDePeso);\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state);\r\n        return (\r\n            <form className=\"w-75 mx-auto\" onSubmit={ this.mandarDatos } >\r\n                <div className=\"form-row\">\r\n                    <div className=\"form-group col-6\">\r\n                        <input\r\n                            onChange={ this.actualizarState }\r\n                            name=\"libras\" \r\n                            placeholder=\"Tu peso\"\r\n                            type=\"number\"\r\n                            className=\"form-control font-weight-bold\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group col-6\">\r\n                        <select name=\"unidadDePeso\" onChange={ this.actualizarState } className=\"form-control font-weight-bold\">\r\n                            <option value=\"lb\">Libras</option>\r\n                            <option value=\"kg\">Kilogramos</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <select name=\"planeta\" onChange={ this.actualizarState } className=\"form-control font-weight-bold\">\r\n                        <option value=\"\">Dónde te quieres pesar?</option>\r\n                        <option value=\"luna\">En la luna</option>\r\n                        <option value=\"marte\">En Marte</option>\r\n                        <option value=\"saturno\">En Saturno</option>\r\n                        <option value=\"jupiter\">En Júpiter</option>\r\n                        <option value=\"agujero\">En un Agujero Negro - Bonus</option>\r\n                    </select>\r\n                </div>\r\n                <input\r\n                    disabled={ this.habilitarSubmit() }\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block px-5 \"\r\n                    value=\"Calcular!\"\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react'\r\n\r\n// importar todas las imagenes\r\n// import every image\r\nimport luna from '../img/luna.png';\r\nimport marte from '../img/marte.png';\r\nimport saturno from '../img/saturno.png';\r\nimport jupiter from '../img/jupiter.png';\r\nimport agujero from '../img/agujeronegro.png';\r\n\r\nconst Resultado = (props) => {\r\n    let image;\r\n    // leer Props\r\n    // read Props\r\n    switch (props.planeta) {\r\n        // dependiendo de qué planeta ha sido elegido, cargar imagen.\r\n        // depending which one planet has beed chosen, load image.\r\n        case \"luna\":\r\n            image = luna;\r\n            break;\r\n        case \"marte\":\r\n            image = marte;\r\n            break;\r\n        case \"saturno\":\r\n            image = saturno;\r\n            break;\r\n        case \"jupiter\":\r\n            image = jupiter;\r\n            break;\r\n        case \"agujero\":\r\n            image = agujero;\r\n            break;\r\n        default:\r\n            console.log(\"Error: los datos han sido alterados\");\r\n            break;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"card bg-light w-75 mx-auto p-2 my-5\">\r\n          <img className=\"card-img-top mx-auto\" src={\"./\" + image} alt=\"cuerpo celeste .png\" style={{maxWidth: 20 + 'em'}} />\r\n          <div className=\"card-body bg-white rounded mt-2\">\r\n            <p className=\"card-text text-dark\">Aquí tu peso es <span className=\"font-weight-bold text-primary\">{ props.pesoTotal }</span> <span className=\"font-weight-bold\">{props.unidadDePeso}(s)</span>.</p>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resultado\r\n","import React from 'react'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"cube1\"></div>\r\n            <div className=\"cube2\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\nimport './App.css';\n// importar componentes y funciones\n// import components and functions \nimport Formulario from './components/Formulario';\nimport { calcularPeso } from './helpers.js';\nimport Resultado from './components/resultado.js';\nimport Spinner from './components/Spinner';\n// crear un componente como APP\n// create a component as App\nclass App extends Component {\n  state = {\n    pesoTotal : \"\",\n    planeta: \"\",\n    unidadDePeso: \"\",\n    cargando: false\n  }\n  // obtener datos del usuario\n  // get the user's data\n  datosPeso = (libras, planeta, unidadDePeso) => {\n    // calcular el peso y poner los datos en la variable 'datos'\n    // calculate the weight and put the data in the var 'datos'\n    let datos = calcularPeso(libras, planeta, unidadDePeso);\n    // insertarlos en el state\n    // insert in the state\n    this.setState({\n      cargando: true\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          pesoTotal: datos.peso_final,\n          planeta: datos.planeta,\n          unidadDePeso: datos.unidad,\n          cargando: false\n        })\n      }, 2000);\n    })\n  }\n\n  render() {\n    const { pesoTotal, planeta, unidadDePeso, cargando } = this.state;\n    let componente;\n\n    // si no está calculando mostrar mensaje.\n    // if is not calculing show message.\n    if(pesoTotal === \"\" && !cargando) {\n      componente = \"Agrega los datos para hacer el viaje a otros mundos!\";\n    } else if (cargando) {\n      // si está calculando el peso, cargar componente \"spinner\"\n      // if is calculing the weight, load component \"spinner\"\n      console.log(\"cargando...\")\n      componente = <Spinner />;\n    } else {\n      // si hay resultados, cargar componente con resultados.\n      // if there is results, load components with the results.\n      componente = <Resultado\n                    pesoTotal={pesoTotal}\n                    planeta={planeta}\n                    unidadDePeso={unidadDePeso}\n                  />;\n    }\n\n    return (\n      <div className=\"universo py-5\">\n        <h1 className=\"text-light text-center mb-5\">Tu peso en otros Planetas!</h1>\n        <Formulario \n          datosPeso={this.datosPeso}\n        />\n        <div className=\"text-center text-white mt-5 w-75 mx-auto\">\n          {componente}\n        </div>\n      </div>        \n    );\n  }\n}\n\nexport default App;\n","export function calcularPeso(peso, planeta, unidad) {\r\n    // gravedad de cada cuerpo astronómico.\r\n    // gravity for each astronomical body.\r\n    let gravedad_tierra = 9.8, \r\n        gravedad_luna = 1.62,\r\n        gravedad_marte = 3.7,\r\n        gravedad_saturno = 10.4,\r\n        gravedad_jupiter = 24.8,\r\n        gravedad_agujero = 1300000,\r\n        peso_final = null;\r\n\r\n    let datoFinal = {\r\n        peso_final,\r\n        planeta,\r\n        unidad\r\n    };\r\n    // calcular el peso en cada planeta y retornar resultados\r\n    // calculate the weight in each planet and return results\r\n    switch (planeta) {\r\n        case \"luna\":\r\n            peso_final = peso * gravedad_luna / gravedad_tierra;\r\n            console.log(`tu peso en ${planeta} es ${peso_final.toFixed(1)} ${unidad}`);\r\n            \r\n            datoFinal.peso_final = peso_final.toFixed(1);\r\n            datoFinal.planeta = planeta;\r\n            datoFinal.unidad = unidad;\r\n\r\n            return datoFinal;\r\n        case \"marte\":\r\n            peso_final = peso * gravedad_marte / gravedad_tierra;\r\n            console.log(`tu peso en ${planeta} es ${peso_final.toFixed(1)} ${unidad}`);\r\n            \r\n            datoFinal.peso_final = peso_final.toFixed(1);\r\n            datoFinal.planeta = planeta;\r\n            datoFinal.unidad = unidad;\r\n\r\n            return datoFinal;\r\n        case \"saturno\":\r\n            peso_final = peso * gravedad_saturno / gravedad_tierra;\r\n            console.log(`tu peso en ${planeta} es ${peso_final.toFixed(1)} ${unidad}`);\r\n            \r\n            datoFinal.peso_final = peso_final.toFixed(1);\r\n            datoFinal.planeta = planeta;\r\n            datoFinal.unidad = unidad;\r\n\r\n            return datoFinal;\r\n        case \"jupiter\":\r\n            peso_final = peso * gravedad_jupiter / gravedad_tierra;\r\n            console.log(`tu peso en ${planeta} es ${peso_final.toFixed(1)} ${unidad}`);\r\n            \r\n            datoFinal.peso_final = peso_final.toFixed(1);\r\n            datoFinal.planeta = planeta;\r\n            datoFinal.unidad = unidad;\r\n\r\n            return datoFinal;\r\n        case \"agujero\":\r\n                peso_final = peso * gravedad_agujero / gravedad_tierra;\r\n                console.log(`tu peso en ${planeta} es ${peso_final.toFixed(1)} ${unidad}`);\r\n                \r\n                datoFinal.peso_final = peso_final.toFixed(1);\r\n                datoFinal.planeta = planeta;\r\n                datoFinal.unidad = unidad;\r\n    \r\n                return datoFinal;\r\n\r\n            default:\r\n            console.log(\"error: los datos han sido alterados\");\r\n            break;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}